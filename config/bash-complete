#  Distributed under the Boost Software License, Version 1.0.
#  (See accompanying file LICENSE_1_0.txt or copy at
#  http://www.boost.org/LICENSE_1_0.txt)
#
#  Automatically generated file. Do NOT modify manually,
#  edit configure.py instead

function _mirror_config()
{
	COMPREPLY=()
	local curr="${COMP_WORDS[COMP_CWORD]}"
	local prev="${COMP_WORDS[COMP_CWORD-1]}"

	case "${prev}" in
		-h|--help)
			return 0;;
		--generator)
			OLDIFS=${IFS}
			IFS=$'\r\n'
			COMPREPLY=($(
				cmake --help |
				sed -n '/^Generators\s*$/,$p' |
				tail -n +4 |
				grep -v -e '^\s\+=' |
				grep -v -e '^\s*$' |
				cut -d= -f 1 |
				sed 's/^\s*\([^ ].\+[^ ]\)\s*$/\1/' |
				grep -e "^${curr}" |
				sed 's/ /\\ /g'
			))
			IFS=${OLDIFS}
			return 0;;
		--prefix|--build-dir|--reflexpr-include-dir|-R|--include-dir|-I|--library-dir|-L|--search-dir|-S)
			COMPREPLY=($(compgen -f "${curr}"))
			return 0;;
		--config-type)
			COMPREPLY=($(compgen -W "Debug Release" -- "${curr}"))
			return 0;;
		--build-docs)
			COMPREPLY=($(compgen -W "True False" -- "${curr}"))
			return 0;;
		*)
	esac

	local only_once_opts=" \
		-h --help \
		--generate-bash-complete \
		--generate-manual \
		--prefix \
		--build-dir \
		--reflexpr-include-dir -R \
		--use-cxxflags \
		--use-ldflags \
		--with-rapidjson \
		--without-rapidjson \
		--debug \
		--release \
		--build-docs \
		--no-docs \
		--clean \
		--quiet \
		--quick \
		--jobs \
		--build \
		--no-tests \
		--generator \
		--debug-config \
		--cmake \
	"

	local muog_0=" \
		--build-docs \
		--no-docs \
	"

	local repeated_opts=" \
		--include-dir -I \
		--library-dir -L \
		--search-dir -S \
		--config-type \
	"

	local opts="${repeated_opts}"

	for opt in ${only_once_opts}
	do
		local opt_used=false
		for pre in ${COMP_WORDS[@]}
		do
			if [ "${opt}" == "${pre}" ]
			then opt_used=true && break
			fi
		done
		if [ "${opt_used}" == "false" ]
		then
			for muog in "${muog_0}"
			do
				local is_muo=false
				for muo in ${muog}
				do
					if [ "${opt}" == "${muo}" ]
					then is_muo=true && break
					fi
				done
				if [ "${is_muo}" == "true" ]
				then
					for pre in ${COMP_WORDS[@]}
					do
						for muo in ${muog}
						do
							if [ "${pre}" == "${muo}" ]
							then opt_used=true && break
							fi
						done
					done
				fi
			done

			if [ "${opt_used}" == "false" ]
			then opts="${opts} ${opt}"
			fi
		fi
	done

	if [ ${COMP_CWORD} -le 1 ]
	then opts="--help ${opts}"
	fi

	COMPREPLY=($(compgen -W "${opts}" -- "${curr}"))
}
complete -F _mirror_config ./mirror-config

[/ Copyright Matus Chochlik.                                        ]
[/ Distributed under the Boost Software License, Version 1.0.       ]
[/ See accompanying file LICENSE_1_0.txt or copy at                 ]
[/  http://www.boost.org/LICENSE_1_0.txt                            ]

[chapter Introduction
	[quickbook 1.6]
	[id reflexpr.intro]
]

This is the documentation for the implementation of C++ reflection as
described in the [link papers.proposals papers].

[section:metaobjects Metaobjects]

Compile-time constant metadata describing various aspects of a compiled program
are provided indirectly by the means of types generated by the compiler —
['Metaobjects].
A ['Metaobject] is an anonymous type reflecting (representing) a particular
declaration in a C++ program, the ['base-level] program declaration.
It can be reasoned-about at compile-time and provides access to metadata
describing various properties of the reflected declaration through a set
of templates.
The Metaobject types themselves are opaque, without any visible internal
structure. Values of such a Metaobject type can be default-constructed. 


The Metaobjects are generated on demand by the compiler as the result
of the invocation of the __reflexpr operator.


The actual metadata can be obtained by instantiating templates constituting
the interface of the Metaobjects. Each template serves a particular purpose
and provides a single piece of metadata. These templates are collectively
referred to as ['Metaobject operations].

Metaobjects reflecting different kinds of declarations conform to different
Metaobject concepts and have different interfaces — sets of templates applicable
to the Metaobjects. These concepts can also be used for Metaobject
classification. 

Metaobject concepts form a generalization-specialization hierarchy,
with [^__std_meta_Object] being the common generalization for all Metaobjects. 

[endsect]

[include intro/hello_world.qbk]
